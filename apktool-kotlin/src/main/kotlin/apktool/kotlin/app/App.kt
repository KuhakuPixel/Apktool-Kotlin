/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package apktool.kotlin.app


import apktool.kotlin.lib.Apktool
import java.io.File

fun main(args: Array<String>) {

    // replace the string
    val packageToBeAdded = "\"com.kuhakupixel.purchaseserver\""
    val packageToBeRemoved1 = "\"com.android.vending\""
    val packageToBeRemoved2 = "\"com.android.vending.billing.InAppBillingService.BIND\""

    Apktool(
            apkFile = args[0],
            decodeResource = false,
            cleanDecompilationFolder = false
    ).use {
        val decompiledFiles: Array<File> = it.decompilationFolder!!.listFiles()!!

        for (f: File in decompiledFiles) {
            println(f.absolutePath)
        }
        // ============== begin the patch process ================
        val apiFolderPath = File(it.decompilationFolder.toString(), "smali/com/android/billingclient/api/")
        val billingClientFiles: Array<File> = apiFolderPath.listFiles()

        // for folder, find the exact and replace
        for (f in billingClientFiles) {
            // write

            val text: String = f.readText()

            if (text.contains(packageToBeRemoved1) && text.contains(packageToBeRemoved2)) {
                var newText = text.replace(packageToBeRemoved1, packageToBeAdded)
                newText = newText.replace(packageToBeRemoved2, packageToBeAdded)

                // replace with normal log
                val logSmaliInstruction = "Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I"
                println("New text: ${newText}")
                newText = newText.replace("Lcom/google/android/gms/internal/play_billing/zzb;->zzo(Ljava/lang/String;Ljava/lang/String;)V", logSmaliInstruction)
                newText = newText.replace("Lcom/google/android/gms/internal/play_billing/zzb;->zzn(Ljava/lang/String;Ljava/lang/String;)V", logSmaliInstruction)
                //
                println("writing to ${f.absolutePath}")
                f.printWriter().use { out ->
                    out.print(newText)
                }
            }
        }


        it.export("Recompiled.apk", signApk = true)
    }


}
